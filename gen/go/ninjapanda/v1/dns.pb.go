// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: ninjapanda/v1/dns.proto

package ninjapanda_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DNSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace         string           `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	UseLocal          bool             `protobuf:"varint,2,opt,name=use_local,json=useLocal,proto3" json:"use_local,omitempty"`
	EnableMagicDns    bool             `protobuf:"varint,3,opt,name=enable_magic_dns,json=enableMagicDns,proto3" json:"enable_magic_dns,omitempty"`
	NameserverIpAddrs []string         `protobuf:"bytes,4,rep,name=nameserver_ip_addrs,json=nameserverIpAddrs,proto3" json:"nameserver_ip_addrs,omitempty"`
	SearchDomainNs    []*MapFieldEntry `protobuf:"bytes,5,rep,name=search_domain_ns,json=searchDomainNs,proto3" json:"search_domain_ns,omitempty"`
}

func (x *DNSConfig) Reset() {
	*x = DNSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ninjapanda_v1_dns_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSConfig) ProtoMessage() {}

func (x *DNSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ninjapanda_v1_dns_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSConfig.ProtoReflect.Descriptor instead.
func (*DNSConfig) Descriptor() ([]byte, []int) {
	return file_ninjapanda_v1_dns_proto_rawDescGZIP(), []int{0}
}

func (x *DNSConfig) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DNSConfig) GetUseLocal() bool {
	if x != nil {
		return x.UseLocal
	}
	return false
}

func (x *DNSConfig) GetEnableMagicDns() bool {
	if x != nil {
		return x.EnableMagicDns
	}
	return false
}

func (x *DNSConfig) GetNameserverIpAddrs() []string {
	if x != nil {
		return x.NameserverIpAddrs
	}
	return nil
}

func (x *DNSConfig) GetSearchDomainNs() []*MapFieldEntry {
	if x != nil {
		return x.SearchDomainNs
	}
	return nil
}

type GetDnsConfigByNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *GetDnsConfigByNamespaceRequest) Reset() {
	*x = GetDnsConfigByNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ninjapanda_v1_dns_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDnsConfigByNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDnsConfigByNamespaceRequest) ProtoMessage() {}

func (x *GetDnsConfigByNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ninjapanda_v1_dns_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDnsConfigByNamespaceRequest.ProtoReflect.Descriptor instead.
func (*GetDnsConfigByNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_ninjapanda_v1_dns_proto_rawDescGZIP(), []int{1}
}

func (x *GetDnsConfigByNamespaceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type GetDnsConfigByNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsConfig *DNSConfig `protobuf:"bytes,1,opt,name=dns_config,json=dnsConfig,proto3" json:"dns_config,omitempty"`
}

func (x *GetDnsConfigByNamespaceResponse) Reset() {
	*x = GetDnsConfigByNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ninjapanda_v1_dns_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDnsConfigByNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDnsConfigByNamespaceResponse) ProtoMessage() {}

func (x *GetDnsConfigByNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ninjapanda_v1_dns_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDnsConfigByNamespaceResponse.ProtoReflect.Descriptor instead.
func (*GetDnsConfigByNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_ninjapanda_v1_dns_proto_rawDescGZIP(), []int{2}
}

func (x *GetDnsConfigByNamespaceResponse) GetDnsConfig() *DNSConfig {
	if x != nil {
		return x.DnsConfig
	}
	return nil
}

type CreateDnsConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsConfig *DNSConfig `protobuf:"bytes,1,opt,name=dns_config,json=dnsConfig,proto3" json:"dns_config,omitempty"`
}

func (x *CreateDnsConfigRequest) Reset() {
	*x = CreateDnsConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ninjapanda_v1_dns_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDnsConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDnsConfigRequest) ProtoMessage() {}

func (x *CreateDnsConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ninjapanda_v1_dns_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDnsConfigRequest.ProtoReflect.Descriptor instead.
func (*CreateDnsConfigRequest) Descriptor() ([]byte, []int) {
	return file_ninjapanda_v1_dns_proto_rawDescGZIP(), []int{3}
}

func (x *CreateDnsConfigRequest) GetDnsConfig() *DNSConfig {
	if x != nil {
		return x.DnsConfig
	}
	return nil
}

type CreateDnsConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsConfig *DNSConfig `protobuf:"bytes,1,opt,name=dns_config,json=dnsConfig,proto3" json:"dns_config,omitempty"`
}

func (x *CreateDnsConfigResponse) Reset() {
	*x = CreateDnsConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ninjapanda_v1_dns_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDnsConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDnsConfigResponse) ProtoMessage() {}

func (x *CreateDnsConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ninjapanda_v1_dns_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDnsConfigResponse.ProtoReflect.Descriptor instead.
func (*CreateDnsConfigResponse) Descriptor() ([]byte, []int) {
	return file_ninjapanda_v1_dns_proto_rawDescGZIP(), []int{4}
}

func (x *CreateDnsConfigResponse) GetDnsConfig() *DNSConfig {
	if x != nil {
		return x.DnsConfig
	}
	return nil
}

type UpdateDnsConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsConfig *DNSConfig `protobuf:"bytes,1,opt,name=dns_config,json=dnsConfig,proto3" json:"dns_config,omitempty"`
}

func (x *UpdateDnsConfigRequest) Reset() {
	*x = UpdateDnsConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ninjapanda_v1_dns_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDnsConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDnsConfigRequest) ProtoMessage() {}

func (x *UpdateDnsConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ninjapanda_v1_dns_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDnsConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateDnsConfigRequest) Descriptor() ([]byte, []int) {
	return file_ninjapanda_v1_dns_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateDnsConfigRequest) GetDnsConfig() *DNSConfig {
	if x != nil {
		return x.DnsConfig
	}
	return nil
}

type UpdateDnsConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsConfig *DNSConfig `protobuf:"bytes,1,opt,name=dns_config,json=dnsConfig,proto3" json:"dns_config,omitempty"`
}

func (x *UpdateDnsConfigResponse) Reset() {
	*x = UpdateDnsConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ninjapanda_v1_dns_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDnsConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDnsConfigResponse) ProtoMessage() {}

func (x *UpdateDnsConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ninjapanda_v1_dns_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDnsConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateDnsConfigResponse) Descriptor() ([]byte, []int) {
	return file_ninjapanda_v1_dns_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateDnsConfigResponse) GetDnsConfig() *DNSConfig {
	if x != nil {
		return x.DnsConfig
	}
	return nil
}

type OverrideLocalDnsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	UseLocal  bool   `protobuf:"varint,2,opt,name=use_local,json=useLocal,proto3" json:"use_local,omitempty"`
}

func (x *OverrideLocalDnsRequest) Reset() {
	*x = OverrideLocalDnsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ninjapanda_v1_dns_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverrideLocalDnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverrideLocalDnsRequest) ProtoMessage() {}

func (x *OverrideLocalDnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ninjapanda_v1_dns_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverrideLocalDnsRequest.ProtoReflect.Descriptor instead.
func (*OverrideLocalDnsRequest) Descriptor() ([]byte, []int) {
	return file_ninjapanda_v1_dns_proto_rawDescGZIP(), []int{7}
}

func (x *OverrideLocalDnsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *OverrideLocalDnsRequest) GetUseLocal() bool {
	if x != nil {
		return x.UseLocal
	}
	return false
}

type OverrideLocalDnsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsConfig *DNSConfig `protobuf:"bytes,1,opt,name=dns_config,json=dnsConfig,proto3" json:"dns_config,omitempty"`
}

func (x *OverrideLocalDnsResponse) Reset() {
	*x = OverrideLocalDnsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ninjapanda_v1_dns_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverrideLocalDnsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverrideLocalDnsResponse) ProtoMessage() {}

func (x *OverrideLocalDnsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ninjapanda_v1_dns_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverrideLocalDnsResponse.ProtoReflect.Descriptor instead.
func (*OverrideLocalDnsResponse) Descriptor() ([]byte, []int) {
	return file_ninjapanda_v1_dns_proto_rawDescGZIP(), []int{8}
}

func (x *OverrideLocalDnsResponse) GetDnsConfig() *DNSConfig {
	if x != nil {
		return x.DnsConfig
	}
	return nil
}

type DomainNameServersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	IpAddrs   []string `protobuf:"bytes,2,rep,name=ip_addrs,json=ipAddrs,proto3" json:"ip_addrs,omitempty"`
}

func (x *DomainNameServersRequest) Reset() {
	*x = DomainNameServersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ninjapanda_v1_dns_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainNameServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainNameServersRequest) ProtoMessage() {}

func (x *DomainNameServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ninjapanda_v1_dns_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainNameServersRequest.ProtoReflect.Descriptor instead.
func (*DomainNameServersRequest) Descriptor() ([]byte, []int) {
	return file_ninjapanda_v1_dns_proto_rawDescGZIP(), []int{9}
}

func (x *DomainNameServersRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DomainNameServersRequest) GetIpAddrs() []string {
	if x != nil {
		return x.IpAddrs
	}
	return nil
}

type DomainNameServersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsConfig *DNSConfig `protobuf:"bytes,1,opt,name=dns_config,json=dnsConfig,proto3" json:"dns_config,omitempty"`
}

func (x *DomainNameServersResponse) Reset() {
	*x = DomainNameServersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ninjapanda_v1_dns_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainNameServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainNameServersResponse) ProtoMessage() {}

func (x *DomainNameServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ninjapanda_v1_dns_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainNameServersResponse.ProtoReflect.Descriptor instead.
func (*DomainNameServersResponse) Descriptor() ([]byte, []int) {
	return file_ninjapanda_v1_dns_proto_rawDescGZIP(), []int{10}
}

func (x *DomainNameServersResponse) GetDnsConfig() *DNSConfig {
	if x != nil {
		return x.DnsConfig
	}
	return nil
}

type MagicDnsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Enable    bool   `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *MagicDnsRequest) Reset() {
	*x = MagicDnsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ninjapanda_v1_dns_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicDnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicDnsRequest) ProtoMessage() {}

func (x *MagicDnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ninjapanda_v1_dns_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicDnsRequest.ProtoReflect.Descriptor instead.
func (*MagicDnsRequest) Descriptor() ([]byte, []int) {
	return file_ninjapanda_v1_dns_proto_rawDescGZIP(), []int{11}
}

func (x *MagicDnsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *MagicDnsRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type MagicDnsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsConfig *DNSConfig `protobuf:"bytes,1,opt,name=dns_config,json=dnsConfig,proto3" json:"dns_config,omitempty"`
}

func (x *MagicDnsResponse) Reset() {
	*x = MagicDnsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ninjapanda_v1_dns_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicDnsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicDnsResponse) ProtoMessage() {}

func (x *MagicDnsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ninjapanda_v1_dns_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicDnsResponse.ProtoReflect.Descriptor instead.
func (*MagicDnsResponse) Descriptor() ([]byte, []int) {
	return file_ninjapanda_v1_dns_proto_rawDescGZIP(), []int{12}
}

func (x *MagicDnsResponse) GetDnsConfig() *DNSConfig {
	if x != nil {
		return x.DnsConfig
	}
	return nil
}

type SplitDnsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace      string           `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	SearchDomainNs []*MapFieldEntry `protobuf:"bytes,2,rep,name=search_domain_ns,json=searchDomainNs,proto3" json:"search_domain_ns,omitempty"`
}

func (x *SplitDnsRequest) Reset() {
	*x = SplitDnsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ninjapanda_v1_dns_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitDnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitDnsRequest) ProtoMessage() {}

func (x *SplitDnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ninjapanda_v1_dns_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitDnsRequest.ProtoReflect.Descriptor instead.
func (*SplitDnsRequest) Descriptor() ([]byte, []int) {
	return file_ninjapanda_v1_dns_proto_rawDescGZIP(), []int{13}
}

func (x *SplitDnsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SplitDnsRequest) GetSearchDomainNs() []*MapFieldEntry {
	if x != nil {
		return x.SearchDomainNs
	}
	return nil
}

type SplitDnsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsConfig *DNSConfig `protobuf:"bytes,1,opt,name=dns_config,json=dnsConfig,proto3" json:"dns_config,omitempty"`
}

func (x *SplitDnsResponse) Reset() {
	*x = SplitDnsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ninjapanda_v1_dns_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitDnsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitDnsResponse) ProtoMessage() {}

func (x *SplitDnsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ninjapanda_v1_dns_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitDnsResponse.ProtoReflect.Descriptor instead.
func (*SplitDnsResponse) Descriptor() ([]byte, []int) {
	return file_ninjapanda_v1_dns_proto_rawDescGZIP(), []int{14}
}

func (x *SplitDnsResponse) GetDnsConfig() *DNSConfig {
	if x != nil {
		return x.DnsConfig
	}
	return nil
}

type DeleteDnsConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *DeleteDnsConfigRequest) Reset() {
	*x = DeleteDnsConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ninjapanda_v1_dns_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDnsConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDnsConfigRequest) ProtoMessage() {}

func (x *DeleteDnsConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ninjapanda_v1_dns_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDnsConfigRequest.ProtoReflect.Descriptor instead.
func (*DeleteDnsConfigRequest) Descriptor() ([]byte, []int) {
	return file_ninjapanda_v1_dns_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteDnsConfigRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type DeleteDnsConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDnsConfigResponse) Reset() {
	*x = DeleteDnsConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ninjapanda_v1_dns_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDnsConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDnsConfigResponse) ProtoMessage() {}

func (x *DeleteDnsConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ninjapanda_v1_dns_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDnsConfigResponse.ProtoReflect.Descriptor instead.
func (*DeleteDnsConfigResponse) Descriptor() ([]byte, []int) {
	return file_ninjapanda_v1_dns_proto_rawDescGZIP(), []int{16}
}

var File_ninjapanda_v1_dns_proto protoreflect.FileDescriptor

var file_ninjapanda_v1_dns_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6e, 0x69, 0x6e, 0x6a, 0x61,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x1a, 0x23, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x70, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8, 0x01,
	0x0a, 0x09, 0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x6e, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x73,
	0x12, 0x46, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x69, 0x6e,
	0x6a, 0x61, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x73, 0x22, 0x3e, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x44,
	0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x5a, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x44,
	0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x64,
	0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x51, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6e,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x64, 0x6e,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x52, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x09, 0x64, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x51, 0x0a, 0x16, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x69, 0x6e, 0x6a,
	0x61, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x52,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x6e, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x4e,
	0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x54, 0x0a, 0x17, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x22, 0x53, 0x0a, 0x18, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x69, 0x6e, 0x6a, 0x61,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x53, 0x0a,
	0x18, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x69, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x73, 0x22, 0x54, 0x0a, 0x19, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x64,
	0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x47, 0x0a, 0x0f, 0x4d, 0x61, 0x67, 0x69,
	0x63, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x4b, 0x0a, 0x10, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x69, 0x6e, 0x6a,
	0x61, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x77,
	0x0a, 0x0f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x46, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x69, 0x6e, 0x6a,
	0x61, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x73, 0x22, 0x4b, 0x0a, 0x10, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x44, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x64,
	0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x36, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6e,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x19, 0x0a, 0x17,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0f, 0x5a, 0x0d, 0x6e, 0x69, 0x6e, 0x6a, 0x61,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ninjapanda_v1_dns_proto_rawDescOnce sync.Once
	file_ninjapanda_v1_dns_proto_rawDescData = file_ninjapanda_v1_dns_proto_rawDesc
)

func file_ninjapanda_v1_dns_proto_rawDescGZIP() []byte {
	file_ninjapanda_v1_dns_proto_rawDescOnce.Do(func() {
		file_ninjapanda_v1_dns_proto_rawDescData = protoimpl.X.CompressGZIP(file_ninjapanda_v1_dns_proto_rawDescData)
	})
	return file_ninjapanda_v1_dns_proto_rawDescData
}

var file_ninjapanda_v1_dns_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_ninjapanda_v1_dns_proto_goTypes = []interface{}{
	(*DNSConfig)(nil),                       // 0: ninjapanda.v1.DNSConfig
	(*GetDnsConfigByNamespaceRequest)(nil),  // 1: ninjapanda.v1.GetDnsConfigByNamespaceRequest
	(*GetDnsConfigByNamespaceResponse)(nil), // 2: ninjapanda.v1.GetDnsConfigByNamespaceResponse
	(*CreateDnsConfigRequest)(nil),          // 3: ninjapanda.v1.CreateDnsConfigRequest
	(*CreateDnsConfigResponse)(nil),         // 4: ninjapanda.v1.CreateDnsConfigResponse
	(*UpdateDnsConfigRequest)(nil),          // 5: ninjapanda.v1.UpdateDnsConfigRequest
	(*UpdateDnsConfigResponse)(nil),         // 6: ninjapanda.v1.UpdateDnsConfigResponse
	(*OverrideLocalDnsRequest)(nil),         // 7: ninjapanda.v1.OverrideLocalDnsRequest
	(*OverrideLocalDnsResponse)(nil),        // 8: ninjapanda.v1.OverrideLocalDnsResponse
	(*DomainNameServersRequest)(nil),        // 9: ninjapanda.v1.DomainNameServersRequest
	(*DomainNameServersResponse)(nil),       // 10: ninjapanda.v1.DomainNameServersResponse
	(*MagicDnsRequest)(nil),                 // 11: ninjapanda.v1.MagicDnsRequest
	(*MagicDnsResponse)(nil),                // 12: ninjapanda.v1.MagicDnsResponse
	(*SplitDnsRequest)(nil),                 // 13: ninjapanda.v1.SplitDnsRequest
	(*SplitDnsResponse)(nil),                // 14: ninjapanda.v1.SplitDnsResponse
	(*DeleteDnsConfigRequest)(nil),          // 15: ninjapanda.v1.DeleteDnsConfigRequest
	(*DeleteDnsConfigResponse)(nil),         // 16: ninjapanda.v1.DeleteDnsConfigResponse
	(*MapFieldEntry)(nil),                   // 17: ninjapanda.v1.MapFieldEntry
}
var file_ninjapanda_v1_dns_proto_depIdxs = []int32{
	17, // 0: ninjapanda.v1.DNSConfig.search_domain_ns:type_name -> ninjapanda.v1.MapFieldEntry
	0,  // 1: ninjapanda.v1.GetDnsConfigByNamespaceResponse.dns_config:type_name -> ninjapanda.v1.DNSConfig
	0,  // 2: ninjapanda.v1.CreateDnsConfigRequest.dns_config:type_name -> ninjapanda.v1.DNSConfig
	0,  // 3: ninjapanda.v1.CreateDnsConfigResponse.dns_config:type_name -> ninjapanda.v1.DNSConfig
	0,  // 4: ninjapanda.v1.UpdateDnsConfigRequest.dns_config:type_name -> ninjapanda.v1.DNSConfig
	0,  // 5: ninjapanda.v1.UpdateDnsConfigResponse.dns_config:type_name -> ninjapanda.v1.DNSConfig
	0,  // 6: ninjapanda.v1.OverrideLocalDnsResponse.dns_config:type_name -> ninjapanda.v1.DNSConfig
	0,  // 7: ninjapanda.v1.DomainNameServersResponse.dns_config:type_name -> ninjapanda.v1.DNSConfig
	0,  // 8: ninjapanda.v1.MagicDnsResponse.dns_config:type_name -> ninjapanda.v1.DNSConfig
	17, // 9: ninjapanda.v1.SplitDnsRequest.search_domain_ns:type_name -> ninjapanda.v1.MapFieldEntry
	0,  // 10: ninjapanda.v1.SplitDnsResponse.dns_config:type_name -> ninjapanda.v1.DNSConfig
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_ninjapanda_v1_dns_proto_init() }
func file_ninjapanda_v1_dns_proto_init() {
	if File_ninjapanda_v1_dns_proto != nil {
		return
	}
	file_ninjapanda_v1_map_field_entry_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ninjapanda_v1_dns_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ninjapanda_v1_dns_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDnsConfigByNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ninjapanda_v1_dns_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDnsConfigByNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ninjapanda_v1_dns_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDnsConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ninjapanda_v1_dns_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDnsConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ninjapanda_v1_dns_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDnsConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ninjapanda_v1_dns_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDnsConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ninjapanda_v1_dns_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverrideLocalDnsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ninjapanda_v1_dns_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverrideLocalDnsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ninjapanda_v1_dns_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainNameServersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ninjapanda_v1_dns_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainNameServersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ninjapanda_v1_dns_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MagicDnsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ninjapanda_v1_dns_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MagicDnsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ninjapanda_v1_dns_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitDnsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ninjapanda_v1_dns_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitDnsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ninjapanda_v1_dns_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDnsConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ninjapanda_v1_dns_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDnsConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ninjapanda_v1_dns_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ninjapanda_v1_dns_proto_goTypes,
		DependencyIndexes: file_ninjapanda_v1_dns_proto_depIdxs,
		MessageInfos:      file_ninjapanda_v1_dns_proto_msgTypes,
	}.Build()
	File_ninjapanda_v1_dns_proto = out.File
	file_ninjapanda_v1_dns_proto_rawDesc = nil
	file_ninjapanda_v1_dns_proto_goTypes = nil
	file_ninjapanda_v1_dns_proto_depIdxs = nil
}
