// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ninjapanda_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NinjapandaServiceClient is the client API for NinjapandaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NinjapandaServiceClient interface {
	GetRelayMap(ctx context.Context, in *RelayMapRequest, opts ...grpc.CallOption) (*RelayMapResponse, error)
	RefreshRelayMap(ctx context.Context, in *RelayMapRequest, opts ...grpc.CallOption) (*RelayMapResponse, error)
	CheckHealth(ctx context.Context, in *CheckHealthRequest, opts ...grpc.CallOption) (*CheckHealthResponse, error)
	GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error)
	CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error)
	UpdateNamespace(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*UpdateNamespaceResponse, error)
	PatchNamespace(ctx context.Context, in *PatchNamespaceRequest, opts ...grpc.CallOption) (*PatchNamespaceResponse, error)
	RenameNamespace(ctx context.Context, in *RenameNamespaceRequest, opts ...grpc.CallOption) (*RenameNamespaceResponse, error)
	DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error)
	ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error)
	ListPreAuthKeys(ctx context.Context, in *ListPreAuthKeysRequest, opts ...grpc.CallOption) (*ListPreAuthKeysResponse, error)
	CreatePreAuthKey(ctx context.Context, in *CreatePreAuthKeyRequest, opts ...grpc.CallOption) (*CreatePreAuthKeyResponse, error)
	ExpirePreAuthKey(ctx context.Context, in *ExpirePreAuthKeyRequest, opts ...grpc.CallOption) (*ExpirePreAuthKeyResponse, error)
	RevokePreAuthKey(ctx context.Context, in *RevokePreAuthKeyRequest, opts ...grpc.CallOption) (*RevokePreAuthKeyResponse, error)
	DebugCreateMachine(ctx context.Context, in *DebugCreateMachineRequest, opts ...grpc.CallOption) (*DebugCreateMachineResponse, error)
	GetMachine(ctx context.Context, in *GetMachineRequest, opts ...grpc.CallOption) (*GetMachineResponse, error)
	SetTags(ctx context.Context, in *SetTagsRequest, opts ...grpc.CallOption) (*SetTagsResponse, error)
	RegisterMachine(ctx context.Context, in *RegisterMachineRequest, opts ...grpc.CallOption) (*RegisterMachineResponse, error)
	DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*DeleteMachineResponse, error)
	ExpireMachine(ctx context.Context, in *ExpireMachineRequest, opts ...grpc.CallOption) (*ExpireMachineResponse, error)
	RenameMachine(ctx context.Context, in *RenameMachineRequest, opts ...grpc.CallOption) (*RenameMachineResponse, error)
	ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error)
	MoveMachine(ctx context.Context, in *MoveMachineRequest, opts ...grpc.CallOption) (*MoveMachineResponse, error)
	AuthorizeMachine(ctx context.Context, in *AuthorizeMachineRequest, opts ...grpc.CallOption) (*AuthorizeMachineResponse, error)
	GetRoutes(ctx context.Context, in *GetRoutesRequest, opts ...grpc.CallOption) (*GetRoutesResponse, error)
	EnableRoute(ctx context.Context, in *EnableRouteRequest, opts ...grpc.CallOption) (*EnableRouteResponse, error)
	DisableRoute(ctx context.Context, in *DisableRouteRequest, opts ...grpc.CallOption) (*DisableRouteResponse, error)
	GetMachineRoutes(ctx context.Context, in *GetMachineRoutesRequest, opts ...grpc.CallOption) (*GetMachineRoutesResponse, error)
	CreateMachineRoutes(ctx context.Context, in *CreateMachineRoutesRequest, opts ...grpc.CallOption) (*CreateMachineRoutesResponse, error)
	UpdateMachineRoutes(ctx context.Context, in *UpdateMachineRoutesRequest, opts ...grpc.CallOption) (*UpdateMachineRoutesResponse, error)
	DeleteMachineRoute(ctx context.Context, in *DeleteMachineRouteRequest, opts ...grpc.CallOption) (*DeleteMachineRouteResponse, error)
	ListApiKeys(ctx context.Context, in *ListApiKeysRequest, opts ...grpc.CallOption) (*ListApiKeysResponse, error)
	CreateApiKey(ctx context.Context, in *CreateApiKeyRequest, opts ...grpc.CallOption) (*CreateApiKeyResponse, error)
	ExpireApiKey(ctx context.Context, in *ExpireApiKeyRequest, opts ...grpc.CallOption) (*ExpireApiKeyResponse, error)
	GetACLPolicy(ctx context.Context, in *GetACLPolicyRequest, opts ...grpc.CallOption) (*GetACLPolicyResponse, error)
	DeleteACLPolicy(ctx context.Context, in *DeleteACLPolicyRequest, opts ...grpc.CallOption) (*DeleteACLPolicyResponse, error)
	CreateACLPolicy(ctx context.Context, in *CreateACLPolicyRequest, opts ...grpc.CallOption) (*CreateACLPolicyResponse, error)
	UpdateACLPolicy(ctx context.Context, in *UpdateACLPolicyRequest, opts ...grpc.CallOption) (*UpdateACLPolicyResponse, error)
	ReorderACLPolicy(ctx context.Context, in *ReorderACLPolicyRequest, opts ...grpc.CallOption) (*ReorderACLPolicyResponse, error)
	GetDnsConfigByNamespace(ctx context.Context, in *GetDnsConfigByNamespaceRequest, opts ...grpc.CallOption) (*GetDnsConfigByNamespaceResponse, error)
	CreateDnsConfig(ctx context.Context, in *CreateDnsConfigRequest, opts ...grpc.CallOption) (*CreateDnsConfigResponse, error)
	UpdateDnsConfig(ctx context.Context, in *UpdateDnsConfigRequest, opts ...grpc.CallOption) (*UpdateDnsConfigResponse, error)
	OverrideLocalDns(ctx context.Context, in *OverrideLocalDnsRequest, opts ...grpc.CallOption) (*OverrideLocalDnsResponse, error)
	DomainNameServers(ctx context.Context, in *DomainNameServersRequest, opts ...grpc.CallOption) (*DomainNameServersResponse, error)
	MagicDns(ctx context.Context, in *MagicDnsRequest, opts ...grpc.CallOption) (*MagicDnsResponse, error)
	SplitDns(ctx context.Context, in *SplitDnsRequest, opts ...grpc.CallOption) (*SplitDnsResponse, error)
	DeleteDnsConfig(ctx context.Context, in *DeleteDnsConfigRequest, opts ...grpc.CallOption) (*DeleteDnsConfigResponse, error)
}

type ninjapandaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNinjapandaServiceClient(cc grpc.ClientConnInterface) NinjapandaServiceClient {
	return &ninjapandaServiceClient{cc}
}

func (c *ninjapandaServiceClient) GetRelayMap(ctx context.Context, in *RelayMapRequest, opts ...grpc.CallOption) (*RelayMapResponse, error) {
	out := new(RelayMapResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/GetRelayMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) RefreshRelayMap(ctx context.Context, in *RelayMapRequest, opts ...grpc.CallOption) (*RelayMapResponse, error) {
	out := new(RelayMapResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/RefreshRelayMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) CheckHealth(ctx context.Context, in *CheckHealthRequest, opts ...grpc.CallOption) (*CheckHealthResponse, error) {
	out := new(CheckHealthResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/CheckHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error) {
	out := new(GetNamespaceResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/GetNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error) {
	out := new(CreateNamespaceResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/CreateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) UpdateNamespace(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*UpdateNamespaceResponse, error) {
	out := new(UpdateNamespaceResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/UpdateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) PatchNamespace(ctx context.Context, in *PatchNamespaceRequest, opts ...grpc.CallOption) (*PatchNamespaceResponse, error) {
	out := new(PatchNamespaceResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/PatchNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) RenameNamespace(ctx context.Context, in *RenameNamespaceRequest, opts ...grpc.CallOption) (*RenameNamespaceResponse, error) {
	out := new(RenameNamespaceResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/RenameNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error) {
	out := new(DeleteNamespaceResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/DeleteNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error) {
	out := new(ListNamespacesResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/ListNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) ListPreAuthKeys(ctx context.Context, in *ListPreAuthKeysRequest, opts ...grpc.CallOption) (*ListPreAuthKeysResponse, error) {
	out := new(ListPreAuthKeysResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/ListPreAuthKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) CreatePreAuthKey(ctx context.Context, in *CreatePreAuthKeyRequest, opts ...grpc.CallOption) (*CreatePreAuthKeyResponse, error) {
	out := new(CreatePreAuthKeyResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/CreatePreAuthKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) ExpirePreAuthKey(ctx context.Context, in *ExpirePreAuthKeyRequest, opts ...grpc.CallOption) (*ExpirePreAuthKeyResponse, error) {
	out := new(ExpirePreAuthKeyResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/ExpirePreAuthKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) RevokePreAuthKey(ctx context.Context, in *RevokePreAuthKeyRequest, opts ...grpc.CallOption) (*RevokePreAuthKeyResponse, error) {
	out := new(RevokePreAuthKeyResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/RevokePreAuthKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) DebugCreateMachine(ctx context.Context, in *DebugCreateMachineRequest, opts ...grpc.CallOption) (*DebugCreateMachineResponse, error) {
	out := new(DebugCreateMachineResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/DebugCreateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) GetMachine(ctx context.Context, in *GetMachineRequest, opts ...grpc.CallOption) (*GetMachineResponse, error) {
	out := new(GetMachineResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/GetMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) SetTags(ctx context.Context, in *SetTagsRequest, opts ...grpc.CallOption) (*SetTagsResponse, error) {
	out := new(SetTagsResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/SetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) RegisterMachine(ctx context.Context, in *RegisterMachineRequest, opts ...grpc.CallOption) (*RegisterMachineResponse, error) {
	out := new(RegisterMachineResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/RegisterMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*DeleteMachineResponse, error) {
	out := new(DeleteMachineResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/DeleteMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) ExpireMachine(ctx context.Context, in *ExpireMachineRequest, opts ...grpc.CallOption) (*ExpireMachineResponse, error) {
	out := new(ExpireMachineResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/ExpireMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) RenameMachine(ctx context.Context, in *RenameMachineRequest, opts ...grpc.CallOption) (*RenameMachineResponse, error) {
	out := new(RenameMachineResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/RenameMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error) {
	out := new(ListMachinesResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/ListMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) MoveMachine(ctx context.Context, in *MoveMachineRequest, opts ...grpc.CallOption) (*MoveMachineResponse, error) {
	out := new(MoveMachineResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/MoveMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) AuthorizeMachine(ctx context.Context, in *AuthorizeMachineRequest, opts ...grpc.CallOption) (*AuthorizeMachineResponse, error) {
	out := new(AuthorizeMachineResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/AuthorizeMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) GetRoutes(ctx context.Context, in *GetRoutesRequest, opts ...grpc.CallOption) (*GetRoutesResponse, error) {
	out := new(GetRoutesResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/GetRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) EnableRoute(ctx context.Context, in *EnableRouteRequest, opts ...grpc.CallOption) (*EnableRouteResponse, error) {
	out := new(EnableRouteResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/EnableRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) DisableRoute(ctx context.Context, in *DisableRouteRequest, opts ...grpc.CallOption) (*DisableRouteResponse, error) {
	out := new(DisableRouteResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/DisableRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) GetMachineRoutes(ctx context.Context, in *GetMachineRoutesRequest, opts ...grpc.CallOption) (*GetMachineRoutesResponse, error) {
	out := new(GetMachineRoutesResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/GetMachineRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) CreateMachineRoutes(ctx context.Context, in *CreateMachineRoutesRequest, opts ...grpc.CallOption) (*CreateMachineRoutesResponse, error) {
	out := new(CreateMachineRoutesResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/CreateMachineRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) UpdateMachineRoutes(ctx context.Context, in *UpdateMachineRoutesRequest, opts ...grpc.CallOption) (*UpdateMachineRoutesResponse, error) {
	out := new(UpdateMachineRoutesResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/UpdateMachineRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) DeleteMachineRoute(ctx context.Context, in *DeleteMachineRouteRequest, opts ...grpc.CallOption) (*DeleteMachineRouteResponse, error) {
	out := new(DeleteMachineRouteResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/DeleteMachineRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) ListApiKeys(ctx context.Context, in *ListApiKeysRequest, opts ...grpc.CallOption) (*ListApiKeysResponse, error) {
	out := new(ListApiKeysResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/ListApiKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) CreateApiKey(ctx context.Context, in *CreateApiKeyRequest, opts ...grpc.CallOption) (*CreateApiKeyResponse, error) {
	out := new(CreateApiKeyResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/CreateApiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) ExpireApiKey(ctx context.Context, in *ExpireApiKeyRequest, opts ...grpc.CallOption) (*ExpireApiKeyResponse, error) {
	out := new(ExpireApiKeyResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/ExpireApiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) GetACLPolicy(ctx context.Context, in *GetACLPolicyRequest, opts ...grpc.CallOption) (*GetACLPolicyResponse, error) {
	out := new(GetACLPolicyResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/GetACLPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) DeleteACLPolicy(ctx context.Context, in *DeleteACLPolicyRequest, opts ...grpc.CallOption) (*DeleteACLPolicyResponse, error) {
	out := new(DeleteACLPolicyResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/DeleteACLPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) CreateACLPolicy(ctx context.Context, in *CreateACLPolicyRequest, opts ...grpc.CallOption) (*CreateACLPolicyResponse, error) {
	out := new(CreateACLPolicyResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/CreateACLPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) UpdateACLPolicy(ctx context.Context, in *UpdateACLPolicyRequest, opts ...grpc.CallOption) (*UpdateACLPolicyResponse, error) {
	out := new(UpdateACLPolicyResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/UpdateACLPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) ReorderACLPolicy(ctx context.Context, in *ReorderACLPolicyRequest, opts ...grpc.CallOption) (*ReorderACLPolicyResponse, error) {
	out := new(ReorderACLPolicyResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/ReorderACLPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) GetDnsConfigByNamespace(ctx context.Context, in *GetDnsConfigByNamespaceRequest, opts ...grpc.CallOption) (*GetDnsConfigByNamespaceResponse, error) {
	out := new(GetDnsConfigByNamespaceResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/GetDnsConfigByNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) CreateDnsConfig(ctx context.Context, in *CreateDnsConfigRequest, opts ...grpc.CallOption) (*CreateDnsConfigResponse, error) {
	out := new(CreateDnsConfigResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/CreateDnsConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) UpdateDnsConfig(ctx context.Context, in *UpdateDnsConfigRequest, opts ...grpc.CallOption) (*UpdateDnsConfigResponse, error) {
	out := new(UpdateDnsConfigResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/UpdateDnsConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) OverrideLocalDns(ctx context.Context, in *OverrideLocalDnsRequest, opts ...grpc.CallOption) (*OverrideLocalDnsResponse, error) {
	out := new(OverrideLocalDnsResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/OverrideLocalDns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) DomainNameServers(ctx context.Context, in *DomainNameServersRequest, opts ...grpc.CallOption) (*DomainNameServersResponse, error) {
	out := new(DomainNameServersResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/DomainNameServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) MagicDns(ctx context.Context, in *MagicDnsRequest, opts ...grpc.CallOption) (*MagicDnsResponse, error) {
	out := new(MagicDnsResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/MagicDns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) SplitDns(ctx context.Context, in *SplitDnsRequest, opts ...grpc.CallOption) (*SplitDnsResponse, error) {
	out := new(SplitDnsResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/SplitDns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ninjapandaServiceClient) DeleteDnsConfig(ctx context.Context, in *DeleteDnsConfigRequest, opts ...grpc.CallOption) (*DeleteDnsConfigResponse, error) {
	out := new(DeleteDnsConfigResponse)
	err := c.cc.Invoke(ctx, "/ninjapanda.v1.NinjapandaService/DeleteDnsConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NinjapandaServiceServer is the server API for NinjapandaService service.
// All implementations must embed UnimplementedNinjapandaServiceServer
// for forward compatibility
type NinjapandaServiceServer interface {
	GetRelayMap(context.Context, *RelayMapRequest) (*RelayMapResponse, error)
	RefreshRelayMap(context.Context, *RelayMapRequest) (*RelayMapResponse, error)
	CheckHealth(context.Context, *CheckHealthRequest) (*CheckHealthResponse, error)
	GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error)
	CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	UpdateNamespace(context.Context, *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error)
	PatchNamespace(context.Context, *PatchNamespaceRequest) (*PatchNamespaceResponse, error)
	RenameNamespace(context.Context, *RenameNamespaceRequest) (*RenameNamespaceResponse, error)
	DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error)
	ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error)
	ListPreAuthKeys(context.Context, *ListPreAuthKeysRequest) (*ListPreAuthKeysResponse, error)
	CreatePreAuthKey(context.Context, *CreatePreAuthKeyRequest) (*CreatePreAuthKeyResponse, error)
	ExpirePreAuthKey(context.Context, *ExpirePreAuthKeyRequest) (*ExpirePreAuthKeyResponse, error)
	RevokePreAuthKey(context.Context, *RevokePreAuthKeyRequest) (*RevokePreAuthKeyResponse, error)
	DebugCreateMachine(context.Context, *DebugCreateMachineRequest) (*DebugCreateMachineResponse, error)
	GetMachine(context.Context, *GetMachineRequest) (*GetMachineResponse, error)
	SetTags(context.Context, *SetTagsRequest) (*SetTagsResponse, error)
	RegisterMachine(context.Context, *RegisterMachineRequest) (*RegisterMachineResponse, error)
	DeleteMachine(context.Context, *DeleteMachineRequest) (*DeleteMachineResponse, error)
	ExpireMachine(context.Context, *ExpireMachineRequest) (*ExpireMachineResponse, error)
	RenameMachine(context.Context, *RenameMachineRequest) (*RenameMachineResponse, error)
	ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error)
	MoveMachine(context.Context, *MoveMachineRequest) (*MoveMachineResponse, error)
	AuthorizeMachine(context.Context, *AuthorizeMachineRequest) (*AuthorizeMachineResponse, error)
	GetRoutes(context.Context, *GetRoutesRequest) (*GetRoutesResponse, error)
	EnableRoute(context.Context, *EnableRouteRequest) (*EnableRouteResponse, error)
	DisableRoute(context.Context, *DisableRouteRequest) (*DisableRouteResponse, error)
	GetMachineRoutes(context.Context, *GetMachineRoutesRequest) (*GetMachineRoutesResponse, error)
	CreateMachineRoutes(context.Context, *CreateMachineRoutesRequest) (*CreateMachineRoutesResponse, error)
	UpdateMachineRoutes(context.Context, *UpdateMachineRoutesRequest) (*UpdateMachineRoutesResponse, error)
	DeleteMachineRoute(context.Context, *DeleteMachineRouteRequest) (*DeleteMachineRouteResponse, error)
	ListApiKeys(context.Context, *ListApiKeysRequest) (*ListApiKeysResponse, error)
	CreateApiKey(context.Context, *CreateApiKeyRequest) (*CreateApiKeyResponse, error)
	ExpireApiKey(context.Context, *ExpireApiKeyRequest) (*ExpireApiKeyResponse, error)
	GetACLPolicy(context.Context, *GetACLPolicyRequest) (*GetACLPolicyResponse, error)
	DeleteACLPolicy(context.Context, *DeleteACLPolicyRequest) (*DeleteACLPolicyResponse, error)
	CreateACLPolicy(context.Context, *CreateACLPolicyRequest) (*CreateACLPolicyResponse, error)
	UpdateACLPolicy(context.Context, *UpdateACLPolicyRequest) (*UpdateACLPolicyResponse, error)
	ReorderACLPolicy(context.Context, *ReorderACLPolicyRequest) (*ReorderACLPolicyResponse, error)
	GetDnsConfigByNamespace(context.Context, *GetDnsConfigByNamespaceRequest) (*GetDnsConfigByNamespaceResponse, error)
	CreateDnsConfig(context.Context, *CreateDnsConfigRequest) (*CreateDnsConfigResponse, error)
	UpdateDnsConfig(context.Context, *UpdateDnsConfigRequest) (*UpdateDnsConfigResponse, error)
	OverrideLocalDns(context.Context, *OverrideLocalDnsRequest) (*OverrideLocalDnsResponse, error)
	DomainNameServers(context.Context, *DomainNameServersRequest) (*DomainNameServersResponse, error)
	MagicDns(context.Context, *MagicDnsRequest) (*MagicDnsResponse, error)
	SplitDns(context.Context, *SplitDnsRequest) (*SplitDnsResponse, error)
	DeleteDnsConfig(context.Context, *DeleteDnsConfigRequest) (*DeleteDnsConfigResponse, error)
	mustEmbedUnimplementedNinjapandaServiceServer()
}

// UnimplementedNinjapandaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNinjapandaServiceServer struct {
}

func (UnimplementedNinjapandaServiceServer) GetRelayMap(context.Context, *RelayMapRequest) (*RelayMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelayMap not implemented")
}
func (UnimplementedNinjapandaServiceServer) RefreshRelayMap(context.Context, *RelayMapRequest) (*RelayMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshRelayMap not implemented")
}
func (UnimplementedNinjapandaServiceServer) CheckHealth(context.Context, *CheckHealthRequest) (*CheckHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (UnimplementedNinjapandaServiceServer) GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespace not implemented")
}
func (UnimplementedNinjapandaServiceServer) CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (UnimplementedNinjapandaServiceServer) UpdateNamespace(context.Context, *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespace not implemented")
}
func (UnimplementedNinjapandaServiceServer) PatchNamespace(context.Context, *PatchNamespaceRequest) (*PatchNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchNamespace not implemented")
}
func (UnimplementedNinjapandaServiceServer) RenameNamespace(context.Context, *RenameNamespaceRequest) (*RenameNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameNamespace not implemented")
}
func (UnimplementedNinjapandaServiceServer) DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (UnimplementedNinjapandaServiceServer) ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (UnimplementedNinjapandaServiceServer) ListPreAuthKeys(context.Context, *ListPreAuthKeysRequest) (*ListPreAuthKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPreAuthKeys not implemented")
}
func (UnimplementedNinjapandaServiceServer) CreatePreAuthKey(context.Context, *CreatePreAuthKeyRequest) (*CreatePreAuthKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePreAuthKey not implemented")
}
func (UnimplementedNinjapandaServiceServer) ExpirePreAuthKey(context.Context, *ExpirePreAuthKeyRequest) (*ExpirePreAuthKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpirePreAuthKey not implemented")
}
func (UnimplementedNinjapandaServiceServer) RevokePreAuthKey(context.Context, *RevokePreAuthKeyRequest) (*RevokePreAuthKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokePreAuthKey not implemented")
}
func (UnimplementedNinjapandaServiceServer) DebugCreateMachine(context.Context, *DebugCreateMachineRequest) (*DebugCreateMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugCreateMachine not implemented")
}
func (UnimplementedNinjapandaServiceServer) GetMachine(context.Context, *GetMachineRequest) (*GetMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMachine not implemented")
}
func (UnimplementedNinjapandaServiceServer) SetTags(context.Context, *SetTagsRequest) (*SetTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTags not implemented")
}
func (UnimplementedNinjapandaServiceServer) RegisterMachine(context.Context, *RegisterMachineRequest) (*RegisterMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMachine not implemented")
}
func (UnimplementedNinjapandaServiceServer) DeleteMachine(context.Context, *DeleteMachineRequest) (*DeleteMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMachine not implemented")
}
func (UnimplementedNinjapandaServiceServer) ExpireMachine(context.Context, *ExpireMachineRequest) (*ExpireMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpireMachine not implemented")
}
func (UnimplementedNinjapandaServiceServer) RenameMachine(context.Context, *RenameMachineRequest) (*RenameMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameMachine not implemented")
}
func (UnimplementedNinjapandaServiceServer) ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachines not implemented")
}
func (UnimplementedNinjapandaServiceServer) MoveMachine(context.Context, *MoveMachineRequest) (*MoveMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveMachine not implemented")
}
func (UnimplementedNinjapandaServiceServer) AuthorizeMachine(context.Context, *AuthorizeMachineRequest) (*AuthorizeMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeMachine not implemented")
}
func (UnimplementedNinjapandaServiceServer) GetRoutes(context.Context, *GetRoutesRequest) (*GetRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoutes not implemented")
}
func (UnimplementedNinjapandaServiceServer) EnableRoute(context.Context, *EnableRouteRequest) (*EnableRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableRoute not implemented")
}
func (UnimplementedNinjapandaServiceServer) DisableRoute(context.Context, *DisableRouteRequest) (*DisableRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableRoute not implemented")
}
func (UnimplementedNinjapandaServiceServer) GetMachineRoutes(context.Context, *GetMachineRoutesRequest) (*GetMachineRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMachineRoutes not implemented")
}
func (UnimplementedNinjapandaServiceServer) CreateMachineRoutes(context.Context, *CreateMachineRoutesRequest) (*CreateMachineRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMachineRoutes not implemented")
}
func (UnimplementedNinjapandaServiceServer) UpdateMachineRoutes(context.Context, *UpdateMachineRoutesRequest) (*UpdateMachineRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMachineRoutes not implemented")
}
func (UnimplementedNinjapandaServiceServer) DeleteMachineRoute(context.Context, *DeleteMachineRouteRequest) (*DeleteMachineRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMachineRoute not implemented")
}
func (UnimplementedNinjapandaServiceServer) ListApiKeys(context.Context, *ListApiKeysRequest) (*ListApiKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApiKeys not implemented")
}
func (UnimplementedNinjapandaServiceServer) CreateApiKey(context.Context, *CreateApiKeyRequest) (*CreateApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApiKey not implemented")
}
func (UnimplementedNinjapandaServiceServer) ExpireApiKey(context.Context, *ExpireApiKeyRequest) (*ExpireApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpireApiKey not implemented")
}
func (UnimplementedNinjapandaServiceServer) GetACLPolicy(context.Context, *GetACLPolicyRequest) (*GetACLPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetACLPolicy not implemented")
}
func (UnimplementedNinjapandaServiceServer) DeleteACLPolicy(context.Context, *DeleteACLPolicyRequest) (*DeleteACLPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteACLPolicy not implemented")
}
func (UnimplementedNinjapandaServiceServer) CreateACLPolicy(context.Context, *CreateACLPolicyRequest) (*CreateACLPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateACLPolicy not implemented")
}
func (UnimplementedNinjapandaServiceServer) UpdateACLPolicy(context.Context, *UpdateACLPolicyRequest) (*UpdateACLPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateACLPolicy not implemented")
}
func (UnimplementedNinjapandaServiceServer) ReorderACLPolicy(context.Context, *ReorderACLPolicyRequest) (*ReorderACLPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReorderACLPolicy not implemented")
}
func (UnimplementedNinjapandaServiceServer) GetDnsConfigByNamespace(context.Context, *GetDnsConfigByNamespaceRequest) (*GetDnsConfigByNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDnsConfigByNamespace not implemented")
}
func (UnimplementedNinjapandaServiceServer) CreateDnsConfig(context.Context, *CreateDnsConfigRequest) (*CreateDnsConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDnsConfig not implemented")
}
func (UnimplementedNinjapandaServiceServer) UpdateDnsConfig(context.Context, *UpdateDnsConfigRequest) (*UpdateDnsConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDnsConfig not implemented")
}
func (UnimplementedNinjapandaServiceServer) OverrideLocalDns(context.Context, *OverrideLocalDnsRequest) (*OverrideLocalDnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverrideLocalDns not implemented")
}
func (UnimplementedNinjapandaServiceServer) DomainNameServers(context.Context, *DomainNameServersRequest) (*DomainNameServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainNameServers not implemented")
}
func (UnimplementedNinjapandaServiceServer) MagicDns(context.Context, *MagicDnsRequest) (*MagicDnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MagicDns not implemented")
}
func (UnimplementedNinjapandaServiceServer) SplitDns(context.Context, *SplitDnsRequest) (*SplitDnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SplitDns not implemented")
}
func (UnimplementedNinjapandaServiceServer) DeleteDnsConfig(context.Context, *DeleteDnsConfigRequest) (*DeleteDnsConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDnsConfig not implemented")
}
func (UnimplementedNinjapandaServiceServer) mustEmbedUnimplementedNinjapandaServiceServer() {}

// UnsafeNinjapandaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NinjapandaServiceServer will
// result in compilation errors.
type UnsafeNinjapandaServiceServer interface {
	mustEmbedUnimplementedNinjapandaServiceServer()
}

func RegisterNinjapandaServiceServer(s grpc.ServiceRegistrar, srv NinjapandaServiceServer) {
	s.RegisterService(&NinjapandaService_ServiceDesc, srv)
}

func _NinjapandaService_GetRelayMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).GetRelayMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/GetRelayMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).GetRelayMap(ctx, req.(*RelayMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_RefreshRelayMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).RefreshRelayMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/RefreshRelayMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).RefreshRelayMap(ctx, req.(*RelayMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/CheckHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).CheckHealth(ctx, req.(*CheckHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/GetNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).GetNamespace(ctx, req.(*GetNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/CreateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).CreateNamespace(ctx, req.(*CreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_UpdateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).UpdateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/UpdateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).UpdateNamespace(ctx, req.(*UpdateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_PatchNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).PatchNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/PatchNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).PatchNamespace(ctx, req.(*PatchNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_RenameNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).RenameNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/RenameNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).RenameNamespace(ctx, req.(*RenameNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/DeleteNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).DeleteNamespace(ctx, req.(*DeleteNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/ListNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).ListNamespaces(ctx, req.(*ListNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_ListPreAuthKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPreAuthKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).ListPreAuthKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/ListPreAuthKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).ListPreAuthKeys(ctx, req.(*ListPreAuthKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_CreatePreAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePreAuthKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).CreatePreAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/CreatePreAuthKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).CreatePreAuthKey(ctx, req.(*CreatePreAuthKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_ExpirePreAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpirePreAuthKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).ExpirePreAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/ExpirePreAuthKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).ExpirePreAuthKey(ctx, req.(*ExpirePreAuthKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_RevokePreAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokePreAuthKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).RevokePreAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/RevokePreAuthKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).RevokePreAuthKey(ctx, req.(*RevokePreAuthKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_DebugCreateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugCreateMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).DebugCreateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/DebugCreateMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).DebugCreateMachine(ctx, req.(*DebugCreateMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_GetMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).GetMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/GetMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).GetMachine(ctx, req.(*GetMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_SetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).SetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/SetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).SetTags(ctx, req.(*SetTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_RegisterMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).RegisterMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/RegisterMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).RegisterMachine(ctx, req.(*RegisterMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_DeleteMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).DeleteMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/DeleteMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).DeleteMachine(ctx, req.(*DeleteMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_ExpireMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpireMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).ExpireMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/ExpireMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).ExpireMachine(ctx, req.(*ExpireMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_RenameMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).RenameMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/RenameMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).RenameMachine(ctx, req.(*RenameMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_ListMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).ListMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/ListMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).ListMachines(ctx, req.(*ListMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_MoveMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).MoveMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/MoveMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).MoveMachine(ctx, req.(*MoveMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_AuthorizeMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).AuthorizeMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/AuthorizeMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).AuthorizeMachine(ctx, req.(*AuthorizeMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_GetRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).GetRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/GetRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).GetRoutes(ctx, req.(*GetRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_EnableRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).EnableRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/EnableRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).EnableRoute(ctx, req.(*EnableRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_DisableRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).DisableRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/DisableRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).DisableRoute(ctx, req.(*DisableRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_GetMachineRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).GetMachineRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/GetMachineRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).GetMachineRoutes(ctx, req.(*GetMachineRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_CreateMachineRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMachineRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).CreateMachineRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/CreateMachineRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).CreateMachineRoutes(ctx, req.(*CreateMachineRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_UpdateMachineRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMachineRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).UpdateMachineRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/UpdateMachineRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).UpdateMachineRoutes(ctx, req.(*UpdateMachineRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_DeleteMachineRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachineRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).DeleteMachineRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/DeleteMachineRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).DeleteMachineRoute(ctx, req.(*DeleteMachineRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_ListApiKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApiKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).ListApiKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/ListApiKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).ListApiKeys(ctx, req.(*ListApiKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_CreateApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).CreateApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/CreateApiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).CreateApiKey(ctx, req.(*CreateApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_ExpireApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpireApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).ExpireApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/ExpireApiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).ExpireApiKey(ctx, req.(*ExpireApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_GetACLPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetACLPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).GetACLPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/GetACLPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).GetACLPolicy(ctx, req.(*GetACLPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_DeleteACLPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteACLPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).DeleteACLPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/DeleteACLPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).DeleteACLPolicy(ctx, req.(*DeleteACLPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_CreateACLPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateACLPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).CreateACLPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/CreateACLPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).CreateACLPolicy(ctx, req.(*CreateACLPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_UpdateACLPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateACLPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).UpdateACLPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/UpdateACLPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).UpdateACLPolicy(ctx, req.(*UpdateACLPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_ReorderACLPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReorderACLPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).ReorderACLPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/ReorderACLPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).ReorderACLPolicy(ctx, req.(*ReorderACLPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_GetDnsConfigByNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDnsConfigByNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).GetDnsConfigByNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/GetDnsConfigByNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).GetDnsConfigByNamespace(ctx, req.(*GetDnsConfigByNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_CreateDnsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDnsConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).CreateDnsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/CreateDnsConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).CreateDnsConfig(ctx, req.(*CreateDnsConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_UpdateDnsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDnsConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).UpdateDnsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/UpdateDnsConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).UpdateDnsConfig(ctx, req.(*UpdateDnsConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_OverrideLocalDns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverrideLocalDnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).OverrideLocalDns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/OverrideLocalDns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).OverrideLocalDns(ctx, req.(*OverrideLocalDnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_DomainNameServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainNameServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).DomainNameServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/DomainNameServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).DomainNameServers(ctx, req.(*DomainNameServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_MagicDns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MagicDnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).MagicDns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/MagicDns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).MagicDns(ctx, req.(*MagicDnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_SplitDns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitDnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).SplitDns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/SplitDns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).SplitDns(ctx, req.(*SplitDnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NinjapandaService_DeleteDnsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDnsConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NinjapandaServiceServer).DeleteDnsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ninjapanda.v1.NinjapandaService/DeleteDnsConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NinjapandaServiceServer).DeleteDnsConfig(ctx, req.(*DeleteDnsConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NinjapandaService_ServiceDesc is the grpc.ServiceDesc for NinjapandaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NinjapandaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ninjapanda.v1.NinjapandaService",
	HandlerType: (*NinjapandaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRelayMap",
			Handler:    _NinjapandaService_GetRelayMap_Handler,
		},
		{
			MethodName: "RefreshRelayMap",
			Handler:    _NinjapandaService_RefreshRelayMap_Handler,
		},
		{
			MethodName: "CheckHealth",
			Handler:    _NinjapandaService_CheckHealth_Handler,
		},
		{
			MethodName: "GetNamespace",
			Handler:    _NinjapandaService_GetNamespace_Handler,
		},
		{
			MethodName: "CreateNamespace",
			Handler:    _NinjapandaService_CreateNamespace_Handler,
		},
		{
			MethodName: "UpdateNamespace",
			Handler:    _NinjapandaService_UpdateNamespace_Handler,
		},
		{
			MethodName: "PatchNamespace",
			Handler:    _NinjapandaService_PatchNamespace_Handler,
		},
		{
			MethodName: "RenameNamespace",
			Handler:    _NinjapandaService_RenameNamespace_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _NinjapandaService_DeleteNamespace_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _NinjapandaService_ListNamespaces_Handler,
		},
		{
			MethodName: "ListPreAuthKeys",
			Handler:    _NinjapandaService_ListPreAuthKeys_Handler,
		},
		{
			MethodName: "CreatePreAuthKey",
			Handler:    _NinjapandaService_CreatePreAuthKey_Handler,
		},
		{
			MethodName: "ExpirePreAuthKey",
			Handler:    _NinjapandaService_ExpirePreAuthKey_Handler,
		},
		{
			MethodName: "RevokePreAuthKey",
			Handler:    _NinjapandaService_RevokePreAuthKey_Handler,
		},
		{
			MethodName: "DebugCreateMachine",
			Handler:    _NinjapandaService_DebugCreateMachine_Handler,
		},
		{
			MethodName: "GetMachine",
			Handler:    _NinjapandaService_GetMachine_Handler,
		},
		{
			MethodName: "SetTags",
			Handler:    _NinjapandaService_SetTags_Handler,
		},
		{
			MethodName: "RegisterMachine",
			Handler:    _NinjapandaService_RegisterMachine_Handler,
		},
		{
			MethodName: "DeleteMachine",
			Handler:    _NinjapandaService_DeleteMachine_Handler,
		},
		{
			MethodName: "ExpireMachine",
			Handler:    _NinjapandaService_ExpireMachine_Handler,
		},
		{
			MethodName: "RenameMachine",
			Handler:    _NinjapandaService_RenameMachine_Handler,
		},
		{
			MethodName: "ListMachines",
			Handler:    _NinjapandaService_ListMachines_Handler,
		},
		{
			MethodName: "MoveMachine",
			Handler:    _NinjapandaService_MoveMachine_Handler,
		},
		{
			MethodName: "AuthorizeMachine",
			Handler:    _NinjapandaService_AuthorizeMachine_Handler,
		},
		{
			MethodName: "GetRoutes",
			Handler:    _NinjapandaService_GetRoutes_Handler,
		},
		{
			MethodName: "EnableRoute",
			Handler:    _NinjapandaService_EnableRoute_Handler,
		},
		{
			MethodName: "DisableRoute",
			Handler:    _NinjapandaService_DisableRoute_Handler,
		},
		{
			MethodName: "GetMachineRoutes",
			Handler:    _NinjapandaService_GetMachineRoutes_Handler,
		},
		{
			MethodName: "CreateMachineRoutes",
			Handler:    _NinjapandaService_CreateMachineRoutes_Handler,
		},
		{
			MethodName: "UpdateMachineRoutes",
			Handler:    _NinjapandaService_UpdateMachineRoutes_Handler,
		},
		{
			MethodName: "DeleteMachineRoute",
			Handler:    _NinjapandaService_DeleteMachineRoute_Handler,
		},
		{
			MethodName: "ListApiKeys",
			Handler:    _NinjapandaService_ListApiKeys_Handler,
		},
		{
			MethodName: "CreateApiKey",
			Handler:    _NinjapandaService_CreateApiKey_Handler,
		},
		{
			MethodName: "ExpireApiKey",
			Handler:    _NinjapandaService_ExpireApiKey_Handler,
		},
		{
			MethodName: "GetACLPolicy",
			Handler:    _NinjapandaService_GetACLPolicy_Handler,
		},
		{
			MethodName: "DeleteACLPolicy",
			Handler:    _NinjapandaService_DeleteACLPolicy_Handler,
		},
		{
			MethodName: "CreateACLPolicy",
			Handler:    _NinjapandaService_CreateACLPolicy_Handler,
		},
		{
			MethodName: "UpdateACLPolicy",
			Handler:    _NinjapandaService_UpdateACLPolicy_Handler,
		},
		{
			MethodName: "ReorderACLPolicy",
			Handler:    _NinjapandaService_ReorderACLPolicy_Handler,
		},
		{
			MethodName: "GetDnsConfigByNamespace",
			Handler:    _NinjapandaService_GetDnsConfigByNamespace_Handler,
		},
		{
			MethodName: "CreateDnsConfig",
			Handler:    _NinjapandaService_CreateDnsConfig_Handler,
		},
		{
			MethodName: "UpdateDnsConfig",
			Handler:    _NinjapandaService_UpdateDnsConfig_Handler,
		},
		{
			MethodName: "OverrideLocalDns",
			Handler:    _NinjapandaService_OverrideLocalDns_Handler,
		},
		{
			MethodName: "DomainNameServers",
			Handler:    _NinjapandaService_DomainNameServers_Handler,
		},
		{
			MethodName: "MagicDns",
			Handler:    _NinjapandaService_MagicDns_Handler,
		},
		{
			MethodName: "SplitDns",
			Handler:    _NinjapandaService_SplitDns_Handler,
		},
		{
			MethodName: "DeleteDnsConfig",
			Handler:    _NinjapandaService_DeleteDnsConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ninjapanda/v1/ninjapanda.proto",
}
