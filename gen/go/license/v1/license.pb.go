// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: license/v1/license.proto

package license

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LicenseCheckContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *LicenseCheckContext) Reset() {
	*x = LicenseCheckContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_v1_license_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseCheckContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseCheckContext) ProtoMessage() {}

func (x *LicenseCheckContext) ProtoReflect() protoreflect.Message {
	mi := &file_license_v1_license_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseCheckContext.ProtoReflect.Descriptor instead.
func (*LicenseCheckContext) Descriptor() ([]byte, []int) {
	return file_license_v1_license_proto_rawDescGZIP(), []int{0}
}

func (x *LicenseCheckContext) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type LicenseCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqId   int32                `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	Key     string               `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Context *LicenseCheckContext `protobuf:"bytes,3,opt,name=context,proto3,oneof" json:"context,omitempty"`
}

func (x *LicenseCheck) Reset() {
	*x = LicenseCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_v1_license_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseCheck) ProtoMessage() {}

func (x *LicenseCheck) ProtoReflect() protoreflect.Message {
	mi := &file_license_v1_license_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseCheck.ProtoReflect.Descriptor instead.
func (*LicenseCheck) Descriptor() ([]byte, []int) {
	return file_license_v1_license_proto_rawDescGZIP(), []int{1}
}

func (x *LicenseCheck) GetSeqId() int32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *LicenseCheck) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LicenseCheck) GetContext() *LicenseCheckContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type LicenseCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Licenses []*LicenseCheck `protobuf:"bytes,1,rep,name=licenses,proto3" json:"licenses,omitempty"`
}

func (x *LicenseCheckRequest) Reset() {
	*x = LicenseCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_v1_license_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseCheckRequest) ProtoMessage() {}

func (x *LicenseCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_license_v1_license_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseCheckRequest.ProtoReflect.Descriptor instead.
func (*LicenseCheckRequest) Descriptor() ([]byte, []int) {
	return file_license_v1_license_proto_rawDescGZIP(), []int{2}
}

func (x *LicenseCheckRequest) GetLicenses() []*LicenseCheck {
	if x != nil {
		return x.Licenses
	}
	return nil
}

type LicenseCheckAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqId     int32  `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	Allowed   bool   `protobuf:"varint,2,opt,name=allowed,proto3" json:"allowed,omitempty"`
	MessageId string `protobuf:"bytes,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *LicenseCheckAnswer) Reset() {
	*x = LicenseCheckAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_v1_license_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseCheckAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseCheckAnswer) ProtoMessage() {}

func (x *LicenseCheckAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_license_v1_license_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseCheckAnswer.ProtoReflect.Descriptor instead.
func (*LicenseCheckAnswer) Descriptor() ([]byte, []int) {
	return file_license_v1_license_proto_rawDescGZIP(), []int{3}
}

func (x *LicenseCheckAnswer) GetSeqId() int32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *LicenseCheckAnswer) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

func (x *LicenseCheckAnswer) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

type LicenseCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Answers []*LicenseCheckAnswer `protobuf:"bytes,1,rep,name=answers,proto3" json:"answers,omitempty"`
}

func (x *LicenseCheckResponse) Reset() {
	*x = LicenseCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_v1_license_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseCheckResponse) ProtoMessage() {}

func (x *LicenseCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_license_v1_license_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseCheckResponse.ProtoReflect.Descriptor instead.
func (*LicenseCheckResponse) Descriptor() ([]byte, []int) {
	return file_license_v1_license_proto_rawDescGZIP(), []int{4}
}

func (x *LicenseCheckResponse) GetAnswers() []*LicenseCheckAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

var File_license_v1_license_proto protoreflect.FileDescriptor

var file_license_v1_license_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x22, 0x2b, 0x0a, 0x13, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x80, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x22, 0x48, 0x0a, 0x13, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x64, 0x0a,
	0x12, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x14, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x73, 0x32, 0x56, 0x0a, 0x0e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1c, 0x2e,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x13, 0x5a, 0x11, 0x2e, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_license_v1_license_proto_rawDescOnce sync.Once
	file_license_v1_license_proto_rawDescData = file_license_v1_license_proto_rawDesc
)

func file_license_v1_license_proto_rawDescGZIP() []byte {
	file_license_v1_license_proto_rawDescOnce.Do(func() {
		file_license_v1_license_proto_rawDescData = protoimpl.X.CompressGZIP(file_license_v1_license_proto_rawDescData)
	})
	return file_license_v1_license_proto_rawDescData
}

var file_license_v1_license_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_license_v1_license_proto_goTypes = []interface{}{
	(*LicenseCheckContext)(nil),  // 0: license.LicenseCheckContext
	(*LicenseCheck)(nil),         // 1: license.LicenseCheck
	(*LicenseCheckRequest)(nil),  // 2: license.LicenseCheckRequest
	(*LicenseCheckAnswer)(nil),   // 3: license.LicenseCheckAnswer
	(*LicenseCheckResponse)(nil), // 4: license.LicenseCheckResponse
}
var file_license_v1_license_proto_depIdxs = []int32{
	0, // 0: license.LicenseCheck.context:type_name -> license.LicenseCheckContext
	1, // 1: license.LicenseCheckRequest.licenses:type_name -> license.LicenseCheck
	3, // 2: license.LicenseCheckResponse.answers:type_name -> license.LicenseCheckAnswer
	2, // 3: license.LicenseService.Check:input_type -> license.LicenseCheckRequest
	4, // 4: license.LicenseService.Check:output_type -> license.LicenseCheckResponse
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_license_v1_license_proto_init() }
func file_license_v1_license_proto_init() {
	if File_license_v1_license_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_license_v1_license_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseCheckContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_v1_license_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_v1_license_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_v1_license_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseCheckAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_v1_license_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_license_v1_license_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_license_v1_license_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_license_v1_license_proto_goTypes,
		DependencyIndexes: file_license_v1_license_proto_depIdxs,
		MessageInfos:      file_license_v1_license_proto_msgTypes,
	}.Build()
	File_license_v1_license_proto = out.File
	file_license_v1_license_proto_rawDesc = nil
	file_license_v1_license_proto_goTypes = nil
	file_license_v1_license_proto_depIdxs = nil
}
